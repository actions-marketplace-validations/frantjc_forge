// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: pkg/githubactions/ctx.proto

package githubactions

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitHubContext  *GitHubContext          `protobuf:"bytes,1,opt,name=git_hub_context,json=gitHubContext,proto3" json:"git_hub_context,omitempty"`
	EnvContext     map[string]string       `protobuf:"bytes,2,rep,name=env_context,json=envContext,proto3" json:"env_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JobContext     *JobContext             `protobuf:"bytes,3,opt,name=job_context,json=jobContext,proto3" json:"job_context,omitempty"`
	StepsContext   map[string]*StepContext `protobuf:"bytes,4,rep,name=steps_context,json=stepsContext,proto3" json:"steps_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RunnerContext  *RunnerContext          `protobuf:"bytes,5,opt,name=runner_context,json=runnerContext,proto3" json:"runner_context,omitempty"`
	InputsContext  map[string]string       `protobuf:"bytes,6,rep,name=inputs_context,json=inputsContext,proto3" json:"inputs_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecretsContext map[string]string       `protobuf:"bytes,7,rep,name=secrets_context,json=secretsContext,proto3" json:"secrets_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NeedsContext   map[string]*NeedContext `protobuf:"bytes,8,rep,name=needs_context,json=needsContext,proto3" json:"needs_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GlobalContext) Reset() {
	*x = GlobalContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalContext) ProtoMessage() {}

func (x *GlobalContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalContext.ProtoReflect.Descriptor instead.
func (*GlobalContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalContext) GetGitHubContext() *GitHubContext {
	if x != nil {
		return x.GitHubContext
	}
	return nil
}

func (x *GlobalContext) GetEnvContext() map[string]string {
	if x != nil {
		return x.EnvContext
	}
	return nil
}

func (x *GlobalContext) GetJobContext() *JobContext {
	if x != nil {
		return x.JobContext
	}
	return nil
}

func (x *GlobalContext) GetStepsContext() map[string]*StepContext {
	if x != nil {
		return x.StepsContext
	}
	return nil
}

func (x *GlobalContext) GetRunnerContext() *RunnerContext {
	if x != nil {
		return x.RunnerContext
	}
	return nil
}

func (x *GlobalContext) GetInputsContext() map[string]string {
	if x != nil {
		return x.InputsContext
	}
	return nil
}

func (x *GlobalContext) GetSecretsContext() map[string]string {
	if x != nil {
		return x.SecretsContext
	}
	return nil
}

func (x *GlobalContext) GetNeedsContext() map[string]*NeedContext {
	if x != nil {
		return x.NeedsContext
	}
	return nil
}

type GitHubContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	ActionPath      string `protobuf:"bytes,2,opt,name=action_path,json=actionPath,proto3" json:"action_path,omitempty"`
	Actor           string `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`
	BaseRef         string `protobuf:"bytes,4,opt,name=base_ref,json=baseRef,proto3" json:"base_ref,omitempty"`
	Event           string `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	EventName       string `protobuf:"bytes,6,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventPath       string `protobuf:"bytes,7,opt,name=event_path,json=eventPath,proto3" json:"event_path,omitempty"`
	HeadRef         string `protobuf:"bytes,8,opt,name=head_ref,json=headRef,proto3" json:"head_ref,omitempty"`
	Job             string `protobuf:"bytes,9,opt,name=job,proto3" json:"job,omitempty"`
	Ref             string `protobuf:"bytes,10,opt,name=ref,proto3" json:"ref,omitempty"`
	RefName         string `protobuf:"bytes,11,opt,name=ref_name,json=refName,proto3" json:"ref_name,omitempty"`
	RefProtected    bool   `protobuf:"varint,12,opt,name=ref_protected,json=refProtected,proto3" json:"ref_protected,omitempty"`
	RefType         string `protobuf:"bytes,13,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	Repository      string `protobuf:"bytes,14,opt,name=repository,proto3" json:"repository,omitempty"`
	RepositoryOwner string `protobuf:"bytes,15,opt,name=repository_owner,json=repositoryOwner,proto3" json:"repository_owner,omitempty"`
	RunId           string `protobuf:"bytes,16,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	RunNumber       int64  `protobuf:"varint,17,opt,name=run_number,json=runNumber,proto3" json:"run_number,omitempty"`
	RunAttempt      int64  `protobuf:"varint,18,opt,name=run_attempt,json=runAttempt,proto3" json:"run_attempt,omitempty"`
	ServerUrl       string `protobuf:"bytes,19,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	Sha             string `protobuf:"bytes,20,opt,name=sha,proto3" json:"sha,omitempty"`
	Token           string `protobuf:"bytes,21,opt,name=token,proto3" json:"token,omitempty"`
	Workflow        string `protobuf:"bytes,22,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Workspace       string `protobuf:"bytes,23,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GitHubContext) Reset() {
	*x = GitHubContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubContext) ProtoMessage() {}

func (x *GitHubContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubContext.ProtoReflect.Descriptor instead.
func (*GitHubContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{1}
}

func (x *GitHubContext) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GitHubContext) GetActionPath() string {
	if x != nil {
		return x.ActionPath
	}
	return ""
}

func (x *GitHubContext) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *GitHubContext) GetBaseRef() string {
	if x != nil {
		return x.BaseRef
	}
	return ""
}

func (x *GitHubContext) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *GitHubContext) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *GitHubContext) GetEventPath() string {
	if x != nil {
		return x.EventPath
	}
	return ""
}

func (x *GitHubContext) GetHeadRef() string {
	if x != nil {
		return x.HeadRef
	}
	return ""
}

func (x *GitHubContext) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *GitHubContext) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GitHubContext) GetRefName() string {
	if x != nil {
		return x.RefName
	}
	return ""
}

func (x *GitHubContext) GetRefProtected() bool {
	if x != nil {
		return x.RefProtected
	}
	return false
}

func (x *GitHubContext) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *GitHubContext) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *GitHubContext) GetRepositoryOwner() string {
	if x != nil {
		return x.RepositoryOwner
	}
	return ""
}

func (x *GitHubContext) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GitHubContext) GetRunNumber() int64 {
	if x != nil {
		return x.RunNumber
	}
	return 0
}

func (x *GitHubContext) GetRunAttempt() int64 {
	if x != nil {
		return x.RunAttempt
	}
	return 0
}

func (x *GitHubContext) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *GitHubContext) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *GitHubContext) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GitHubContext) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *GitHubContext) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type JobContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container *JobContext_Container          `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Services  map[string]*JobContext_Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status    string                         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *JobContext) Reset() {
	*x = JobContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobContext) ProtoMessage() {}

func (x *JobContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobContext.ProtoReflect.Descriptor instead.
func (*JobContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{2}
}

func (x *JobContext) GetContainer() *JobContext_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *JobContext) GetServices() map[string]*JobContext_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *JobContext) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type StepContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs    map[string]string `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Conclusion string            `protobuf:"bytes,2,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	Outcome    string            `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *StepContext) Reset() {
	*x = StepContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepContext) ProtoMessage() {}

func (x *StepContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepContext.ProtoReflect.Descriptor instead.
func (*StepContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{3}
}

func (x *StepContext) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *StepContext) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

func (x *StepContext) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

type RunnerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Os        string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Arch      string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Temp      string `protobuf:"bytes,4,opt,name=temp,proto3" json:"temp,omitempty"`
	ToolCache string `protobuf:"bytes,5,opt,name=tool_cache,json=toolCache,proto3" json:"tool_cache,omitempty"`
}

func (x *RunnerContext) Reset() {
	*x = RunnerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerContext) ProtoMessage() {}

func (x *RunnerContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerContext.ProtoReflect.Descriptor instead.
func (*RunnerContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{4}
}

func (x *RunnerContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnerContext) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *RunnerContext) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *RunnerContext) GetTemp() string {
	if x != nil {
		return x.Temp
	}
	return ""
}

func (x *RunnerContext) GetToolCache() string {
	if x != nil {
		return x.ToolCache
	}
	return ""
}

type NeedContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs map[string]string `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NeedContext) Reset() {
	*x = NeedContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeedContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedContext) ProtoMessage() {}

func (x *NeedContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedContext.ProtoReflect.Descriptor instead.
func (*NeedContext) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{5}
}

func (x *NeedContext) GetOutputs() map[string]string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type JobContext_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *JobContext_Container) Reset() {
	*x = JobContext_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobContext_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobContext_Container) ProtoMessage() {}

func (x *JobContext_Container) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobContext_Container.ProtoReflect.Descriptor instead.
func (*JobContext_Container) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{2, 0}
}

func (x *JobContext_Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobContext_Container) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type JobContext_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Network string            `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Ports   map[string]string `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobContext_Service) Reset() {
	*x = JobContext_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_githubactions_ctx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobContext_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobContext_Service) ProtoMessage() {}

func (x *JobContext_Service) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_githubactions_ctx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobContext_Service.ProtoReflect.Descriptor instead.
func (*JobContext_Service) Descriptor() ([]byte, []int) {
	return file_pkg_githubactions_ctx_proto_rawDescGZIP(), []int{2, 1}
}

func (x *JobContext_Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobContext_Service) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *JobContext_Service) GetPorts() map[string]string {
	if x != nil {
		return x.Ports
	}
	return nil
}

var File_pkg_githubactions_ctx_proto protoreflect.FileDescriptor

var file_pkg_githubactions_ctx_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x08, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x54, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x6e, 0x76,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e,
	0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0a, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x62, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x11, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x05, 0x0a,
	0x0d, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x75,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x93, 0x04, 0x0a, 0x0a, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x35, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xb8, 0x01,
	0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x38,
	0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xcd, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7a, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x72, 0x61, 0x6e, 0x74, 0x6a, 0x63, 0x2f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_githubactions_ctx_proto_rawDescOnce sync.Once
	file_pkg_githubactions_ctx_proto_rawDescData = file_pkg_githubactions_ctx_proto_rawDesc
)

func file_pkg_githubactions_ctx_proto_rawDescGZIP() []byte {
	file_pkg_githubactions_ctx_proto_rawDescOnce.Do(func() {
		file_pkg_githubactions_ctx_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_githubactions_ctx_proto_rawDescData)
	})
	return file_pkg_githubactions_ctx_proto_rawDescData
}

var file_pkg_githubactions_ctx_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_githubactions_ctx_proto_goTypes = []interface{}{
	(*GlobalContext)(nil),        // 0: forge.github.actions.GlobalContext
	(*GitHubContext)(nil),        // 1: forge.github.actions.GitHubContext
	(*JobContext)(nil),           // 2: forge.github.actions.JobContext
	(*StepContext)(nil),          // 3: forge.github.actions.StepContext
	(*RunnerContext)(nil),        // 4: forge.github.actions.RunnerContext
	(*NeedContext)(nil),          // 5: forge.github.actions.NeedContext
	nil,                          // 6: forge.github.actions.GlobalContext.EnvContextEntry
	nil,                          // 7: forge.github.actions.GlobalContext.StepsContextEntry
	nil,                          // 8: forge.github.actions.GlobalContext.InputsContextEntry
	nil,                          // 9: forge.github.actions.GlobalContext.SecretsContextEntry
	nil,                          // 10: forge.github.actions.GlobalContext.NeedsContextEntry
	(*JobContext_Container)(nil), // 11: forge.github.actions.JobContext.Container
	(*JobContext_Service)(nil),   // 12: forge.github.actions.JobContext.Service
	nil,                          // 13: forge.github.actions.JobContext.ServicesEntry
	nil,                          // 14: forge.github.actions.JobContext.Service.PortsEntry
	nil,                          // 15: forge.github.actions.StepContext.OutputsEntry
	nil,                          // 16: forge.github.actions.NeedContext.OutputsEntry
}
var file_pkg_githubactions_ctx_proto_depIdxs = []int32{
	1,  // 0: forge.github.actions.GlobalContext.git_hub_context:type_name -> forge.github.actions.GitHubContext
	6,  // 1: forge.github.actions.GlobalContext.env_context:type_name -> forge.github.actions.GlobalContext.EnvContextEntry
	2,  // 2: forge.github.actions.GlobalContext.job_context:type_name -> forge.github.actions.JobContext
	7,  // 3: forge.github.actions.GlobalContext.steps_context:type_name -> forge.github.actions.GlobalContext.StepsContextEntry
	4,  // 4: forge.github.actions.GlobalContext.runner_context:type_name -> forge.github.actions.RunnerContext
	8,  // 5: forge.github.actions.GlobalContext.inputs_context:type_name -> forge.github.actions.GlobalContext.InputsContextEntry
	9,  // 6: forge.github.actions.GlobalContext.secrets_context:type_name -> forge.github.actions.GlobalContext.SecretsContextEntry
	10, // 7: forge.github.actions.GlobalContext.needs_context:type_name -> forge.github.actions.GlobalContext.NeedsContextEntry
	11, // 8: forge.github.actions.JobContext.container:type_name -> forge.github.actions.JobContext.Container
	13, // 9: forge.github.actions.JobContext.services:type_name -> forge.github.actions.JobContext.ServicesEntry
	15, // 10: forge.github.actions.StepContext.outputs:type_name -> forge.github.actions.StepContext.OutputsEntry
	16, // 11: forge.github.actions.NeedContext.outputs:type_name -> forge.github.actions.NeedContext.OutputsEntry
	3,  // 12: forge.github.actions.GlobalContext.StepsContextEntry.value:type_name -> forge.github.actions.StepContext
	5,  // 13: forge.github.actions.GlobalContext.NeedsContextEntry.value:type_name -> forge.github.actions.NeedContext
	14, // 14: forge.github.actions.JobContext.Service.ports:type_name -> forge.github.actions.JobContext.Service.PortsEntry
	12, // 15: forge.github.actions.JobContext.ServicesEntry.value:type_name -> forge.github.actions.JobContext.Service
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pkg_githubactions_ctx_proto_init() }
func file_pkg_githubactions_ctx_proto_init() {
	if File_pkg_githubactions_ctx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_githubactions_ctx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeedContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobContext_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_githubactions_ctx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobContext_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_githubactions_ctx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_githubactions_ctx_proto_goTypes,
		DependencyIndexes: file_pkg_githubactions_ctx_proto_depIdxs,
		MessageInfos:      file_pkg_githubactions_ctx_proto_msgTypes,
	}.Build()
	File_pkg_githubactions_ctx_proto = out.File
	file_pkg_githubactions_ctx_proto_rawDesc = nil
	file_pkg_githubactions_ctx_proto_goTypes = nil
	file_pkg_githubactions_ctx_proto_depIdxs = nil
}
